# coding:utf-8
# *******************************************************************
# * Copyright 2021-present evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.com
# ********************************************************************
import os

Import('env')


exclude_function_list = 'do_page_fault,syscall_handler,general_protection,syscall1,syscall2,syscall3,syscall4,syscall5,print_string,do_shell_cmd,print_promot'

exclude_file_list = 'duck/init,duck/arch,duck/libs,duck/init,duck/kernel/thread.c,duck/kernel/schedule.c,duck/kernel/syscall.c,duck/kernel/sysfn.c,duck/kernel/vfs.c,duck/kernel/devfn.c,duck/kernel/exceptions.c,duck/kernel/logger.c,duck/kernel/page.c,duck/kernel/memory.c,duck/kernel/vmemory.c,modules/serial/bcm2836.c,modules/serial/v3s.c'

cflags = '$CFLAGS $LIBCFLAGS -finstrument-functions  -finstrument-functions-exclude-function-list=%s -finstrument-functions-exclude-file-list=%s ' % (
    exclude_function_list, exclude_file_list)  # -DUSE_POOL -finstrument-functions

cflags = '$CFLAGS $LIBCFLAGS '

arch_type = env['ARCHTYPE']

platform = env['PLATFORM']

modules = []
other = []

libs = [
    'yiyiya',
    'arch',
    'algorithm',
    'kernel'
]
include = [
    '.',
    '../',
    '../libs/include',
    '../platform',
    '../kernel',
    '../../',
    '../platform/'+env.get('PLATFORM')
]


platform_source = {
    'v3s': [
        'gpu/v3s.c',
        'mmc/v3s.c',
        # 'mmc/v3s-sd.c',
        'serial/v3s.c',
        'mouse/v3s.c',
        'i2c/i2c.c',
        'i2c/v3s.c',
        'gpio/gpio.c',
        'gpio/v3s.c',
        'spi/spi.c',
        'spi/v3s.c',
        'rtc/v3s.c',
    ],
    'cubieboard2': [
        'gpu/v3s.c',
        'mmc/v3s.c',
        'serial/v3s.c',
        'mouse/v3s.c',
        'i2c/i2c.c',
        'i2c/v3s.c',
        'gpio/gpio.c',
        'gpio/v3s.c',
        'spi/spi.c',
        'spi/v3s.c',
    ],
    'orangepi-pc': [
        'gpu/v3s.c',
        'mmc/v3s.c',
        'serial/v3s.c',
        'mouse/v3s.c',
        'i2c/i2c.c',
        'i2c/v3s.c',
        'gpio/gpio.c',
        'gpio/v3s.c',
        'spi/spi.c',
        'spi/v3s.c',
        'rtc/v3s.c',
    ],
    'raspi2': [
        'gpu/bcm2836.c',
        'gpu/mailbox.c',
        'mmc/bcm2836.c',
        'mmc/bcm2835_vc.c',
        'serial/bcm2836.c',
        'mouse/bcm2836.c',
        'i2c/i2c.c',
        'i2c/bcm2836.c',
        'gpio/gpio.c',
        'gpio/bcm2836.c',
        'spi/spi.c',
        'spi/bcm2836.c',
        'rtc/bcm2836.c',
    ],
    'stm32f4xx': [
        'gpio/gpio.c',
        'gpio/stm32.c',
        'i2c/i2c.c',
        'i2c/stm32.c',
        'spi/spi.c',
        'spi/stm32.c',
        'lcd/lcd.c',
        'lcd/st7735.c',
        'serial/stm32.c',
    ],
    'rk3128': [
        'gpu/rk3128.c',
        'mmc/rk3128.c',
        'serial/rk3128.c',
        'mouse/rk3128.c',
        'i2c/i2c.c',
        'i2c/rk3128.c',
        'gpio/gpio.c',
        'gpio/rk3128.c',
        'spi/spi.c',
        'spi/rk3128.c',
    ],
    'rk3288': [
        'gpu/rk3128.c',
        'mmc/rk3128.c',
        'serial/rk3128.c',
        'mouse/rk3128.c',
        'i2c/i2c.c',
        'i2c/rk3128.c',
        'gpio/gpio.c',
        'gpio/rk3128.c',
        'spi/spi.c',
        'spi/rk3128.c',
    ],
    'riscv-virt': [
        'serial/riscv-virt.c',
    ]
}

if platform_source.get(platform):
    other = platform_source.get(platform)

if arch_type == 'arm':
    modules = [
        'fat/fat.c',
        'fat/byteordering.c',
        'fat/partition.c',
        'fat/mod.c',
        # 'fat32/fat32.c',

        'gpu/gpu.c',
        'mmc/sdhci.c',
        'hello/hello.c',
        'test/test.c',
        'test/test-fat.c',
    ]

elif arch_type == 'x86':
    modules = ['pci.c',
               'pic/pic.c',
               'ahci/ahci.c',
               'dma/dma.c',

               'hello/hello.c',
               'serial/serial.c',
               'rtc/rtc.c',
               'vga/vga.c',
               'vga/mode.c',
               'vga/qemu.c',
               'mouse/mouse.c',
               'keyboard/keyboard.c',
               'fat32/fat32.c',

               'fat/fat.c',
               'fat/byteordering.c',
               'fat/partition.c',
               'fat/mod.c',

               'sound/sb16.c',
               'net/net.c',
               'net/e1000.c',

               'test/test.c',
               'test/test-ahci.c',
               'test/test-fat.c',
               ]

elif arch_type == 'xtensa':
    modules = [
        'hello/hello.c',
    ]
elif arch_type == 'general':
    modules = [
        'hello/hello.c',
        'serial/general.c',
        'mmc/sdhci.c',
        'mmc/general.c',

        'fat/fat.c',
        'fat/byteordering.c',
        'fat/partition.c',
        'fat/mod.c',

    ]
elif arch_type == 'riscv':
    modules = [
        'hello/hello.c',

        # 'fat/fat.c',
        # 'fat/byteordering.c',
        # 'fat/partition.c',
        # 'fat/mod.c',
    ]
else:
    modules = [
        'hello/hello.c',
    ]


modules += other
modules += Glob('dev/*.c')

if env.get('MODULES'):
    for module in env.get('MODULES'):
        modules += Glob(module+'/*.c')
source = modules

env.Library('modules',
            source,
            CPPPATH=include,
            LIBS=libs,
            CFLAGS=cflags)
