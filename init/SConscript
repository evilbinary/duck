# coding:utf-8
# *******************************************************************
# * Copyright 2021-2080 evilbinary
# * 作者: evilbinary on 01/01/20
# * 邮箱: rootdebug@163.com
# ********************************************************************
import os
import platform
plt = platform.system()

Import('env')

env=env.Clone()

current = Dir('.').srcnode().path+'/../xlinker/'

linkflags = ''
cflags = '$CFLAGS $LIBCLAGS '

if env.get('LINKLD'):
    linkflags = linkflags + ' $LDFLAGS $LINKFLAGS -T ' + \
        current+env.get('LINKLD')  # -Xlinker

include = [
    '../',
    '../libs/include',
    '../platform',
    env.get('LINKLD'),
]

libs = [
    'modules',
    'kernel',
    'arch',
    'platform',
    'archcommon',
    'kernelcommon',
    'algorithm',
]

libpath = [
    '../kernel/',
    '../modules/',
    '../arch/',
    '../platform/',
    '../libs/libarchcommon/',
    '../libs/libkernelcommon/',
    '../libs/libalgorithm/',
    '../libs/libkernel/',
]

kernel = [
    'main.c',
    'module.c',
    'init.c',
    'monitor.c',
    'test.c'
]

if env.get('MYLIB'):
    libs.append(env.get('MYLIB'))
    libpath.append(env.get('CC_LIB_PATH'))


if env.get('SINGLE_KERNEL'):
    arch = env.get('ARCHTYPE')
    kernel.append('../../boot/'+arch+'/boot.o')
    kernel.append('../../boot/'+arch+'/init.o')

env.Program('kernel.elf', kernel,
            CPPPATH=include,
            LIBPATH=libpath,
            LIBS=libs,
            CFLAGS=cflags,
            LINKFLAGS=linkflags,
            )

if env.get('OBJCOPY'):
    env.Objcopy('kernel', 'kernel.elf', OBJCOPYFLAGS='-S')
    env.Objcopy('kernel.dbg', 'kernel.elf', OBJCOPYFLAGS='--only-keep-debug')
    # env.Objcopy('kernel.hex','kernel.elf',OBJCOPYFLAGS='-S -O ihex')
    env.Objcopy('kernel.bin', 'kernel.elf', OBJCOPYFLAGS='-S -O binary')
